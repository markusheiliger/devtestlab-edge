{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "agentBase": {
            "type": "string",
            "defaultValue": "Windows 2016 Datacenter (latest)",
            "allowedValues": [
                "Windows 2016 Datacenter (latest)",
                "Windows - VS2017 Enterprise (latest)"
            ]
        },
        "agentCount": {
            "type": "int",
            "defaultValue": 1,
            "minValue": 1,
            "maxValue": 10,
            "metadata": {
                "description": "..."
            }
        },
        "agentSize": {
            "type": "string",
            "defaultValue": "Standard_DS2_v2",
            "allowedValues": [
                "Standard_DS1_v2",
                "Standard_DS2_v2",
                "Standard_DS3_v2",
                "Standard_DS4_v2",
                "Standard_DS5_v2"
            ],
            "metadata": {
                "description": "..."
            }
        },
        "vstsAccount": {
            "type": "string",
            "minLength": 1,
            "metadata": {
                "description": "..."
            }
        },
        "vstsPool": {
            "type": "string",
            "minLength": 1,
            "metadata": {
                "description": "..."
            }
        },
        "vstsPAT": {
            "type": "securestring",
            "metadata": {
                "description": "..."
            }
        },
        "chocoPackages": {
            "type": "string",
            "metadata": {
                "description": "..."
            }
        },
        "adminUsername": {
            "type": "string",
            "metadata": {
                "description": "Admin username"
            }
        },
        "adminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Admin password"
            }
        },
        "_artifactsLocation": {
            "type": "string",
            "metadata": {
                "description": "The base URI where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."
            },
            "defaultValue": "https://raw.githubusercontent.com/markusheiliger/devtestlab-edge/master/environments/VSTS-BuildRig"
        },
        "_artifactsLocationSasToken": {
            "type": "securestring",
            "metadata": {
                "description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated."
            },
            "defaultValue": ""
        }
    },
    "variables": {
        "resourcePrefix": "[take(concat('br', uniqueString(resourceGroup().id)),10)]",
        "vmName": "[concat(variables('resourcePrefix'), '-ag')]",
        "asName": "[concat(variables('resourcePrefix'), '-as')]",
        "vnetName": "[concat(variables('resourcePrefix'), '-vnet')]",
        "vnetID": "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]",
        "vnetPrefix": "10.0.0.0/16",
        "snetName": "Rig",
        "snetID": "[concat(variables('vnetID'),'/subnets/', variables('snetName'))]",
        "snetPrefix": "10.0.0.0/24",
        "pipName": "[concat(variables('resourcePrefix'), '-pip')]",
        "pipID": "[resourceId('Microsoft.Network/publicIPAddresses', variables('pipName'))]",
        "nicName": "[concat(variables('resourcePrefix'), '-nic')]",
        "nicID": "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]",
        "lbName": "[concat(variables('resourcePrefix'), '-lb')]",
        "lbID": "[resourceId('Microsoft.Network/loadBalancers', variables('lbName'))]",
        "frontEndIPConfigID": "[concat(variables('lbID'),'/frontendIPConfigurations/loadBalancerFrontend')]",
        "agentBaseConfig": "[variables('agentBaseConfigList')[parameters('agentBase')]]",
        "agentBaseConfigList": {
            "Windows 2016 Datacenter (latest)": {
                "publisher": "MicrosoftWindowsServer",
                "offer": "WindowsServer",
                "sku": "2016-Datacenter",
                "version": "latest",
                "scriptFiles": [
                    "[concat(parameters('_artifactsLocation'), '/Prepare-VM.ps1', parameters('_artifactsLocationSasToken'))]",
                    "[concat(parameters('_artifactsLocation'), '/Install-WindowsAgent.ps1', parameters('_artifactsLocationSasToken'))]",
                    "[concat(parameters('_artifactsLocation'), '/Install-Chocolatey.ps1', parameters('_artifactsLocationSasToken'))]"
                ],
                "scriptCommand": "[concat('powershell.exe -ExecutionPolicy Unrestricted -Command \"& { $script = gci -Filter Prepare-VM.ps1 -Recurse | sort -Descending -Property LastWriteTime | select -First 1 -ExpandProperty FullName; . $script -vstsAccount ', parameters('vstsAccount'), ' -personalAccessToken ', parameters('vstsPAT'), ' -PoolName ', parameters('vstsPool'), ' -ChocoPackages ''', parameters('chocoPackages'), ''' }\"')]"
            },
            "Windows - VS2017 Enterprise (latest)": {
                "publisher": "MicrosoftVisualStudio",
                "offer": "VisualStudio",
                "sku": "VS-2017-Ent-Latest-WS2016",
                "version": "latest",
                "scriptFiles": [
                    "[concat(parameters('_artifactsLocation'), '/Prepare-VM.ps1', parameters('_artifactsLocationSasToken'))]",
                    "[concat(parameters('_artifactsLocation'), '/Install-WindowsAgent.ps1', parameters('_artifactsLocationSasToken'))]",
                    "[concat(parameters('_artifactsLocation'), '/Install-Chocolatey.ps1', parameters('_artifactsLocationSasToken'))]"
                ],
                "scriptCommand": "[concat('powershell.exe -ExecutionPolicy Unrestricted -Command \"& { $script = gci -Filter Prepare-VM.ps1 -Recurse | sort -Descending -Property LastWriteTime | select -First 1 -ExpandProperty FullName; . $script -vstsAccount ', parameters('vstsAccount'), ' -personalAccessToken ', parameters('vstsPAT'), ' -PoolName ', parameters('vstsPool'), ' -ChocoPackages ''', parameters('chocoPackages'), ''' }\"')]"
            }
        }
    },
    "resources": [
        {
            "type": "Microsoft.Compute/availabilitySets",
            "name": "[variables('asName')]",
            "apiVersion": "2016-04-30-preview",
            "location": "[resourceGroup().location]",
            "properties": {
                "platformFaultDomainCount": 2,
                "platformUpdateDomainCount": 2,
                "managed": true
            }
        },
        {
            "apiVersion": "2015-06-15",
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[variables('pipName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "publicIPAllocationMethod": "Dynamic",
                "dnsSettings": {
                    "domainNameLabel": "[variables('resourcePrefix')]"
                }
            }
        },
        {
            "apiVersion": "2015-06-15",
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[variables('vnetName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('vnetPrefix')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('snetName')]",
                        "properties": {
                            "addressPrefix": "[variables('snetPrefix')]"
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2015-06-15",
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[concat(variables('nicName'), copyindex())]",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "nicLoop",
                "count": "[parameters('agentCount')]"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', variables('vnetName'))]",
                "[concat('Microsoft.Network/loadBalancers/', variables('lbName'))]",
                "[concat('Microsoft.Network/loadBalancers/', variables('lbName'), '/inboundNatRules/', 'RDP-VM', copyIndex())]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[variables('snetID')]"
                            },
                            "loadBalancerBackendAddressPools": [
                                {
                                    "id": "[concat(variables('lbID'), '/backendAddressPools/LoadBalancerBackend')]"
                                }
                            ],
                            "loadBalancerInboundNatRules": [
                                {
                                    "id": "[concat(variables('lbID'),'/inboundNatRules/RDP-VM', copyindex())]"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2015-06-15",
            "name": "[variables('lbName')]",
            "type": "Microsoft.Network/loadBalancers",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', variables('pipName'))]"
            ],
            "properties": {
                "frontendIPConfigurations": [
                    {
                        "name": "LoadBalancerFrontend",
                        "properties": {
                            "publicIPAddress": {
                                "id": "[variables('pipID')]"
                            }
                        }
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "LoadBalancerBackend"
                    }
                ]
            }
        },
        {
            "apiVersion": "2015-06-15",
            "type": "Microsoft.Network/loadBalancers/inboundNatRules",
            "name": "[concat(variables('lbName'), '/', 'RDP-VM', copyIndex())]",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "lbNatLoop",
                "count": "[parameters('agentCount')]"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/loadBalancers/', variables('lbName'))]"
            ],
            "properties": {
                "frontendIPConfiguration": {
                    "id": "[variables('frontEndIPConfigID')]"
                },
                "protocol": "tcp",
                "frontendPort": "[copyIndex(5000)]",
                "backendPort": 3389,
                "enableFloatingIP": false
            }
        },
        {
            "apiVersion": "2016-04-30-preview",
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[concat(variables('vmName'), copyindex())]",
            "location": "[resourceGroup().location]",
            "tags": {
                "_artifactsLocation": "[parameters('_artifactsLocation')]"
            },
            "copy": {
                "name": "vmLoop",
                "count": "[parameters('agentCount')]"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/networkInterfaces/', variables('nicName'), copyindex())]",
                "[concat('Microsoft.Compute/availabilitySets/', variables('asName'))]"
            ],
            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('asName'))]"
                },
                "hardwareProfile": {
                    "vmSize": "[parameters('agentSize')]"
                },
                "osProfile": {
                    "computerName": "[concat(variables('vmName'), copyIndex())]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPassword')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('agentBaseConfig').publisher]",
                        "offer": "[variables('agentBaseConfig').offer]",
                        "sku": "[variables('agentBaseConfig').sku]",
                        "version": "[variables('agentBaseConfig').version]"
                    },
                    "osDisk": {
                        "createOption": "FromImage"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('nicName'),copyindex()))]"
                        }
                    ]
                }
            }
        },
        {
            "apiVersion": "2015-06-15",
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('vmName'), copyindex(), '/BuildAgent')]",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "agentLoop",
                "count": "[parameters('agentCount')]"
            },
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('vmName'), copyindex())]"
            ],
            "properties": {
                "publisher": "Microsoft.Compute",
                "type": "CustomScriptExtension",
                "typeHandlerVersion": "1.8",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": "[variables('agentBaseConfig').scriptFiles]",
                    "commandToExecute": "[variables('agentBaseConfig').scriptCommand]"
                }
            }
        }
    ]
}